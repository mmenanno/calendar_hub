# SQLite. Versions 3.8.0 and up are supported.
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem "sqlite3"
#
default: &default
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 30000
  pragmas:
    # Enable Write-Ahead Logging (WAL) mode for better concurrent access
    # WAL allows multiple readers and one writer simultaneously, reducing lock contention
    journal_mode: wal
    # Set synchronous mode to NORMAL for better performance with WAL
    # NORMAL is safe with WAL mode and provides good performance
    synchronous: normal
    # Set a reasonable cache size (negative value = KB, positive = pages)
    cache_size: -64000  # 64MB cache
    # Enable memory-mapped I/O for better read performance (bytes)
    mmap_size: 134217728  # 128MB
    # Increase busy timeout (milliseconds) - how long to retry when locked
    busy_timeout: 30000  # 30 seconds

development:
  primary:
    <<: *default
    database: storage/development.sqlite3
  cable:
    <<: *default
    database: storage/development_cable.sqlite3
    migrations_paths: db/cable_migrate

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: storage/test.sqlite3


# Store production database in the storage/ directory, which by default
# is mounted as a persistent Docker volume in config/deploy.yml.
production:
  primary:
    <<: *default
    database: storage/production.sqlite3
  cache:
    <<: *default
    database: storage/production_cache.sqlite3
    migrations_paths: db/cache_migrate
  queue:
    <<: *default
    database: storage/production_queue.sqlite3
    migrations_paths: db/queue_migrate
  cable:
    <<: *default
    database: storage/production_cable.sqlite3
    migrations_paths: db/cable_migrate
